[project]
name = "pytest-grabbag"
dynamic = ["version"]
description = "Pytest plugin with a grabbag of helpful tools."
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["pytest>=8.3.3"]

[tool.pdm]
version = { source = "scm" }

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project.entry-points.pytest11]
pytest_grabbag = "pytest_grabbag"

[project.optional-dependencies]
serde = ["pyyaml>=6.0.2", "rtoml>=0.11.0"]
pydantic = ["pydantic>=2.9.2", "pytest-grabbag[serde]"]
copier = ["copier>=9.3.1"]
all = [
    "pytest-grabbag[serde]",
    "pytest-grabbag[pydantic]",
    "pytest-grabbag[copier]",
]

[dependency-groups]
dev = [
    { include-group = "lint" },
    { include-group = "test" },
    { include-group = "typing" },
]
lint = ["ruff==0.11.9"]
test = ["pytest-randomly>=3.15.0", "pytest-cov>=6.1.1", "pytest-xdist>=3.6.1"]
typing = ["mypy==1.15.0", "types-pyyaml>=6.0.12.20240917"]
typing-test = [{ include-group = "test" }, { include-group = "typing" }]

[tool.uv]
resolution = "lowest-direct"

[tool.uv.sources]
pytest-grabbag = { workspace = true }

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = ["COM812", "ISC001", "ANN401"]

[tool.ruff.lint.per-file-ignores]
# Ignore all directories named `tests`.
"tests/**" = ["D", "S", "ANN"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
exclude = "build"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest_grabbag.*"
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
strict = true
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.coverage.report]
exclude_also = ["if t.TYPE_CHECKING", "@t.overload", "@abstractmethod"]
show_missing = true

[tool.coverage.run]
branch = true

[tool.pytest.ini_options]
addopts = "--cov=src/ --cov-append --cov-report="
